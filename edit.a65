;;;
;;; SCREEN EDITOR
;;;
;;; Basic screen editor for text, using EMACS-like commands.
;;; Text is laid out in 20 rows of 64 characters, mapped into
;;; memory with nulls filling empty space.
;;;
;;; I stupidly managed to delete the text of my own code, and so
;;; this is currently being retreived from a disassembled version
;;; of an executable snapshot.
;;;


SCRATCH=$0010       ; shared with monitor and FORTH
temp=SCRATCH
row=SCRATCH+1
col=SCRATCH+2
rowbase=SCRATCH+3 ; and 4
count=SCRATCH+5
upper=SCRATCH+6   ; and 7
lower=SCRATCH+8   ; and 9
jmpvec=SCRATCH+10 ; and 11

NROWS=20
MAXROW=NROWS-1
NCOLS=64
MAXCOL=NCOLS-1
TEXTBASE=$5FE0
TEXTSIZE=NROWS*NCOLS

ACIA_DATA    = $8800
ACIA_STATUS  = $8801
ACIA_COMMAND = $8802
ACIA_CONTROL = $8803


* = $0300

  jmp begin


;;; table of entry points for the commands invoked by each
;;; control-key.
table
  .word tostart     ; a
  .word back        ; b
  .word undefined   ; c
  .word delfwd      ; d
  .word toend       ; e
  .word forw        ; f
  .word undefined   ; g
  .word delback     ; h
  .word undefined   ; i
  .word undefined   ; j
  .word delline     ; k
  .word repaint     ; l
  .word newline     ; m
  .word next        ; n
  .word openline    ; o
  .word prev        ; p
  .word undefined   ; q
  .word undefined   ; r
  .word undefined   ; s
  .word testcode    ; t
  .word undefined   ; u
  .word undefined   ; v
  .word undefined   ; w
  .word exit        ; x
  .word undefined   ; y
  .word undefined   ; z


begin
  ;; basic setup
  lda $FF
  txs
  cld
  sei

  ;; set up ACIA
  lda #$0B
  sta ACIA_COMMAND
  lda #$1F
  sta ACIA_CONTROL

  lda #$00      ; initialize rowbase
  sta rowbase
  lda #$60
  sta rowbase+1

.(
  ;; this stuff is zeroing out the text block
  lda #NROWS
  sta count
rowloop
  lda #$00
  ldy #MAXCOL ; #$3F
zeroloop
  sta (rowbase),y
  dey
  bne zeroloop
  sta (rowbase)

.(
  clc
  lda rowbase
  adc #NCOLS
  sta rowbase
  bcc doneadd
  inc rowbase+1
doneadd
.)
  lda count
  dec
  sta count
  bne rowloop
.)

  ;; reset variables and screen for startup
  lda #<TEXTBASE
  sta rowbase
  lda #>TEXTBASE
  sta rowbase+1
  stz row
  stz col
  jsr cls
  jsr home


;;; This is the main editor dispatch loop. Fetch a character; if it's
;;; in the command-code range, then look it up in the table; otherwise,
;;; insert it. Everything is done with JMPs and every command JMPs back
;;; to here. Escape is handled with a separate messy routine rather
;;; that a second table.
editloop

  jsr readchar
  cmp #$1B        ; if it's less than 27, it's a control code
  beq escape      ; exactly 27 is escape
  bcs notcmd      ; over 27 is not a command
  dec             ; subtract 1 (to turn it into a 0-ranged value)
  asl             ; shift to multiply by two
  tax             ; that's an offset, so put it in X
;  lda table,x     ; look up the table value at X
;  sta jmpvec      ; and store it in jmpvec
;  lda table+1,x
;  sta jmpvec+1
;  jmp (jmpvec)    ; jump to the address
  jmp (table,x)

  bra editloop    ; shouldn't need this but included for safety

notcmd
  jsr insert
  bra editloop

escape
  jsr readchar
  cmp #"f"
  beq escf
  cmp #"b"
  beq escb
  cmp #"["
  beq arrow
  jmp editloop
escf
  jmp fowdword
escb
  jmp backword
arrow
  jsr readchar
  cmp #"A"
  beq arrowup
  cmp #"B"
  beq arrowdown
  cmp #"C"
  beq arrowright
  cmp #"D"
  beq arrowleft
  jmp editloop
arrowup
  jmp prev
arrowdown
  jmp next
arrowright
  jmp forw
arrowleft
  jmp back

;;; move forward a word. BUG only really uses spaces as delimiters;
;;; should really use any non-alpha character.
fowdword
.(
  ;; if we are on a space, then find a word
  ldy col
findword
  lda (rowbase),y
  beq endofline
  cmp #$20
  bne findend
  iny
  cpy #MAXCOL
  beq endofline
  bra findword
findend
  ;; now find the end of the word
  lda (rowbase),y
  beq endofline
  cmp #$20
  beq found  
  iny
  cpy #MAXCOL
  bne findend
found  
endofline
  sty col
  jsr moveto
  jmp editloop
.)

backword
.(
  ;; if we are on a space, then find a word
  ldy col
  beq finished
findword
  lda (rowbase),y
  beq nextch
  cmp #$20
  bne findstart
nextch
  dey
  beq startofline
  bra findword
findstart
  ;; now find the end of the word
  lda (rowbase),y
  beq startofline
  cmp #$20
  beq found  
  dey
  bne findstart
found  
startofline
  sty col
  jsr moveto
finished
  jmp editloop
.)


;; for small integers (<100), convert to decimal and output
todecimal
.(
  ldy #$30
  sty temp  ; temp
convloop
  cmp #$0A
  bmi donedigit
  sec
  sbc #$0A
  inc temp
  bne convloop
donedigit
  tay
  lda temp
  jsr puta
  tya
  clc
  adc #$30
  jsr puta
  rts
.)

puta
.(
  pha
rdyloop
  lda ACIA_STATUS
  and #$10
  beq rdyloop
  pla
  sta ACIA_DATA
  rts
.)

cls
  lda #$1B  ; esc
  jsr puta
  lda #$5B  ; "["
  jsr puta
  lda #$32  ; "2"
  jsr puta
  lda #$4A  ; "J"
  jsr puta
  rts

home
  lda #$1B  ; esc
  jsr puta
  lda #$5B  ; [
  jsr puta
  lda #$48  ; H
  jsr puta
  rts

clrtoend
  lda #$1B  ; ESC
  jsr puta
  lda #$5B  ; [
  jsr puta
  lda #$30  ; 0
  jsr puta
  lda #$4A ; H
  jsr puta
  rts

moveto
  lda #$1B ; ESC
  jsr puta
  lda #$5B ; [
  jsr puta
  lda row  ; row
  inc
  jsr todecimal
  lda #$3B  ; semic
  jsr puta
  lda col  ; col
  inc
  jsr todecimal
  lda #$48  ; H
  jsr puta
  rts

next
.(
  lda row
  cmp #MAXROW
  beq donothing
  inc row
.(
  clc
  lda rowbase
  adc #NCOLS
  sta rowbase
  bcc doneadd
  inc rowbase+1
doneadd
.)
 jsr moveto
donothing
 jmp editloop
.)

prev
.(
  lda row
  beq donothing
  dec row
  sec
  lda rowbase
  sbc #NCOLS ; #$40
  sta rowbase
  lda rowbase+1
  sbc #$00
  sta rowbase+1
  jsr moveto
donothing
  jmp editloop
.)

back
.(
  lda col
  beq donothing
  dec col
  jsr moveto
donothing
 jmp editloop
.)

forw
.(
  lda col
  cmp #MAXCOL ; #$3F
  beq donothing
  inc col
  jsr moveto
donothing
 jmp editloop
.)

tostart
  stz col
  jsr moveto
  jmp editloop

toend
.(
  ldy #$00
endloop
  lda (rowbase),y
  beq atend
  iny
  cpy #MAXCOL ;#$3F
  beq atend
  bra endloop
atend
  sty col
  jsr moveto
  jmp editloop
.)

delfwd
.(
  ldy     col
delloop
  iny
  lda     (rowbase),y
  dey
  sta     (rowbase),y
  jsr     puta
  beq     done
  iny
  bra   delloop
done
  lda     #$20
  jsr     puta
  jsr     moveto
  jmp     editloop
.)

delback
.(
  lda col
  beq donothing
  dec col
  jsr moveto
  jmp delfwd
donothing
  jmp editloop
.)

insert
  pha
  ldy col
  lda (rowbase),y
  bne notatend
inschar
  pla
  sta (rowbase),y
  jsr puta
  inc col
  jsr moveto
  rts

notatend
  phy
  inc col
  jsr moveto
  dec col
  ply
  ;; move the rest of the line right by one character
  lda (rowbase),y
insloop
  iny
  pha
  lda (rowbase),y
  tax
  pla
  sta (rowbase),y
  jsr puta
  txa
  bne insloop
  iny
  sta (rowbase),y
  jsr moveto
  ldy col
  bra inschar
  lda row
  cmp #MAXROW
  bne newline
  jmp editloop

newline
  ldy col           ; are we at the end of a line?
  lda (rowbase),y
  beq atend         ; if yes
  jmp  breakline    ; if no

atend
.(
  clc               ; reset rowbase to the new line
  lda rowbase
  adc #NCOLS
  sta rowbase
  bcc doneadd
  inc rowbase+1
doneadd        
.)
  lda (rowbase)      ; is this next line empty?
  bne movelines      ; no, so move lines to insert a new one
  inc row            ; yes, so move to it
  stz col
  jsr moveto
  jmp editloop

movelines
  ;; move the rest of the text down by one line
  jsr rippledown

  ;; clear data out of this line
  ldy #MAXCOL
  lda #0
.(
clearloop
  sta (rowbase),y
  dey
  bne clearloop
  sta (rowbase)
.)

  ;; now that the data is in the right place, repaint the screen
  ;; first, clear everything below the current row
  jsr clrtoend
  inc row           ; we haven't done that yet
  jsr moveto

  ;; stash the row count
  lda row
  pha

  ;; now, paint rows that remain
  clc
  lda rowbase
  adc #NCOLS
  sta lower
  lda rowbase+1
  adc #$00
  sta lower+1
  stz col

paintnext
  lda row
  inc
  cmp #MAXROW
  beq donerepaint
  sta row
  stz col
  jsr moveto
  jsr paintrow
  clc
  lda lower
  adc #NCOLS
  sta lower
  bcc paintnext
  inc lower+1
  bra paintnext

donerepaint
  pla
  sta row
  jsr moveto

finish
  jmp editloop

breakline ;; TO BE IMPLEMENTED
  jmp editloop


;; output the text for one row, pointed to by lower. do it
;; directly for faster output without the subroutine call.
paintrow
.(
  phy
  ldy #0
rdyloop
  lda ACIA_STATUS
  and #$10
  beq rdyloop
  lda (lower),y
  beq done
  sta ACIA_DATA
  iny
  cpy #MAXCOL
  beq done
  bra rdyloop
done
  ply
  rts
.)

;;; clear below and print from current row to the bottom of
;;; of the screen. (uses rowbase to point to line)
paintdown
.(
  lda rowbase
  sta lower
  lda rowbase+1
  sta lower+1
  lda row
  pha               ; stash the row count
  lda col
  pha               ; stash the column count
  stz col
paintloop
  jsr moveto
  jsr clrtoend
  jsr paintrow
  lda row
  inc
  cmp #MAXROW
  beq endpaint
  sta row
  clc
  lda lower
  adc #NCOLS
  sta lower
  lda lower+1
  adc #0
  sta lower+1
  bra paintloop
endpaint
  pla
  sta col
  pla
  sta row
  jsr moveto
  rts
.)


;;; repaint the whole screen, saving and then restoring cursor position
;;;
repaint
  lda row
  pha
  lda col
  pha
  lda rowbase
  pha
  lda rowbase+1
  pha
  stz row
  stz col
  lda #<TEXTBASE
  sta rowbase
  lda #>TEXTBASE
  sta rowbase+1
  jsr cls
  jsr home
  jsr paintdown
  pla
  sta rowbase+1
  pla
  sta rowbase
  pla
  sta col
  pla
  sta row
  jsr moveto
  jmp editloop


;;; open a new line
openline
.(
  ldy col
  bne midline
  jsr rippledown
  ldy #0
  lda #0
clearloop
  sta (rowbase),y
  iny
  cpy #MAXCOL
  bne clearloop
  jsr paintdown
  jmp editloop

midline
  ;; still to be implemented
  jmp editloop
.)

;;; move lines down to open up a space. starts from the last line and
;;; works its way down to the current row (rowbase).
rippledown
.(
  ;; find the end of the text area by adding textsize to textbase
  clc
  lda #<TEXTBASE
  adc #<TEXTSIZE
  sta upper
  lda #>TEXTBASE
  adc #>TEXTSIZE
  sta upper+1

  ;; subtract one line length to get the last line in area
  sec
  lda upper
  sbc #NCOLS
  sta upper
  lda upper+1
  sbc #$00
  sta upper+1

  ;; is that the row we're on now?
  lda upper
  cmp rowbase
  bne continue
  lda upper+1
  cmp rowbase+1
  bne continue
  jmp finish        ;  yes so we are done

continue
  ;; substract one more line length and store in lower
  sec
  lda upper
  sbc #$40
  sta lower
  lda upper+1
  sbc #$00
  sta lower+1

  ;; at this point, we have two pointers, lower and upper,
  ;; which point to two adjacent lines at the end of the buffer.
  ;; we want to reapeatedly copy the contents of lower into
  ;; upper. We do this backwards from the end of the buffer
  ;; so that we are preserving text as it ripples down.
linecopy
  ldy #MAXCOL
charcopy
  lda (lower),y
  sta (upper),y
  dey
  bne charcopy
  lda (lower)   ; copy the last character
  sta (upper)

  sec           ; lower line now becomes upper line
  lda lower     ; and lower moves down by one line
  sta upper
  sbc #NCOLS
  sta lower
  lda lower+1
  sta upper+1
  sbc #$00
  sta lower+1

  lda upper      ; stop when upper hits the new line we're at
  cmp rowbase
  bne linecopy
  lda upper+1
  cmp rowbase+1
  bne linecopy
.)
  rts

;;; move lines up when one line is deleted. starts from rowbase (row
;;; being deleted) up to the end
rippleup
.(
  clc
  lda rowbase
  sta lower         ; set lower to be same as rowbase
  adc #NCOLS        ; and upper to be one row later
  sta upper
  lda rowbase+1
  sta lower+1
  adc #0
  sta upper+1

  clc               ; calculate limit for copying
  lda #<TEXTBASE
  adc #<TEXTSIZE
  sta jmpvec        ; weird, but just temporary
  lda #>TEXTBASE
  adc #>TEXTSIZE
  sta jmpvec+1

copyrow
  ldy #0
charloop
  lda (upper),y
  sta (lower),y
  cpy #MAXCOL
  beq endofline
  iny
  bra charloop
endofline

  clc               ; move upper to lower, and increment upper
  lda upper         ; by one row
  sta lower
  adc #NCOLS
  sta upper
  lda upper+1
  sta lower+1
  adc #0
  sta upper+1

  lda upper
  cmp jmpvec
  bne copyrow
  lda upper+1
  cmp jmpvec+1
  bne copyrow

  ;; now clear out that last line (now lower)
  ldy #0
  lda #0
loop
  sta (lower),y
  cpy #MAXCOL
  beq done
  iny
  bra loop  
done
.)
  rts


;;; delete line (^K) -- clears the line when there is text, and close
;;; up the line if it's empty.
delline
  ldy col           ; are we at the start of the line?
  bne midline       ; no

  lda (rowbase),y   ; is the line empty?
  beq closeline     ; yes, so close it up

  ;; delete contents of this line (and erase with spaces)
  ldy #0
.(
clearloop
  lda (rowbase),y
  beq endofline
  lda #0
  sta (rowbase),y
  lda #32
  jsr puta
  cpy #MAXCOL
  beq endofline
  iny
  bra clearloop
endofline
  jsr moveto
  jmp editloop
.)

closeline
  jsr rippleup
  jsr paintdown
  jmp editloop

midline
  ;; still to be implemented
  jmp editloop


;; move to the bottom of the screen and quit via rts
exit
  lda #$15
  sta row
  lda #$00
  sta col
  jsr moveto
  rts

testcode
  jsr clrtoend
  jmp editloop

readchar
  lda ACIA_STATUS
  and #$08
  beq readchar
  lda ACIA_DATA
  rts

undefined
  lda #$07          ; BEL (but it doesn't do anything)
  jsr puta
  jmp editloop

